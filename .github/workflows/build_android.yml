name: Build Android (Crave)
on:
  workflow_dispatch:
    inputs:
      android:
        description: "Choose a ROM to build:"
        required: true
        default: "LineageOS"
        type: choice
        options:
          - "LineageOS"
          - "EvolutionX"
          - "Matrixx"
          - "PixelOS"
          - "RisingOS"
      removals:
        description: "Folders to be removed before syncing:"
        required: false
      device:
        description: "Device:"
        required: true
        default: "eqe"
        type: choice
        options:
          - "eqe"
      build:
        description: "Type of build:"
        required: true
        default: "user"
        type: choice
        options:
          - "eng"
          - "userdebug"
          - "user"
      clean:
        description: "Clean"
        required: true
        default: false
        type: boolean
      release:
        description: "Release"
        required: true
        default: false
        type: boolean

jobs:
  Start-Runner:
    runs-on: ubuntu-latest

    steps:
      - name: Set up environment
        run: sudo apt update && sudo apt install -y tmux

      - name: Configure the 'crave' environment
        run: |
          echo "DCDEVSPACE status: ${DCDEVSPACE}"
          if [[ $DCDEVSPACE == *1* ]]; then
            echo 'No need to set up crave, we are already running in devspace!'
          else
            curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash
            sudo mv crave /usr/local/bin/crave
            echo "$CRAVE_CONF" > ${HOME}/crave.conf
          fi
        env:
          CRAVE_CONF: ${{ secrets.CRAVE_CONF }}

      - name: Run crave devspace
        run: |
          crave devspace -- "echo "Looking for runner..."
          # Look for whether there's a runner folder set up
          if [ -f actions-runner/run.sh ] ; then
            echo "Runner found! Restarting it..."
          else
            echo "Error! Runner not found!"
            exit 1
          fi

          if tmux has-session -t ghactions; then
            echo "Runner is already Running"
          else
            tmux kill-session -t ghactions;
            tmux new-session -d -s ghactions
            tmux send-keys -t ghactions 'actions-runner/run.sh' Enter
            echo "Runner Started"
          fi"

  prepare:
    name: Prepare for Building
    runs-on: ubuntu-latest
    steps:
      - name: Set Project variables
        id: proj-variables
        run: |
          case "${{ inputs.android }}" in
            "LineageOS")
              export PROJECTFOLDER="/crave-devspaces/LineageOS"
              export PROJECTID="93"
              export REPO_URL="https://github.com/LineageOS/android.git"
              export REPO_BRANCH="lineage-22.2"
            ;;
            "EvolutionX")
              export PROJECTFOLDER="/crave-devspaces/EvolutionX"
              export PROJECTID="93"
              export REPO_URL="https://github.com/Evolution-X/manifest.git"
              export REPO_BRANCH="vic"
            ;;
            "Matrixx")
              export PROJECTFOLDER="/crave-devspaces/Matrixx"
              export PROJECTID="93"
              export REPO_URL="https://github.com/ProjectMatrixx/android.git"
              export REPO_BRANCH="15.0"
            ;;
            "PixelOS")
              export PROJECTFOLDER="/crave-devspaces/PixelOS"
              export PROJECTID="93"
              export REPO_URL="https://github.com/PixelOS-AOSP/manifest.git"
              export REPO_BRANCH="fifteen"
            ;;
            "RisingOS")
              export PROJECTFOLDER="/crave-devspaces/RisingOS"
              export PROJECTID="93"
              export REPO_URL="https://github.com/RisingOS-Revived/android.git"
              export REPO_BRANCH="qpr2"
            ;;
          esac

          echo "PROJECTFOLDER=$PROJECTFOLDER" >> "$GITHUB_OUTPUT"
          echo "PROJECTID=$PROJECTID"  >> "$GITHUB_OUTPUT"
          echo "REPO_INIT=repo init --depth 1 --git-lfs -u $REPO_URL -b $REPO_BRANCH" >> "$GITHUB_OUTPUT"
          echo "BUILD_COMMAND=brunch ${{ inputs.device }} ${{ inputs.build }}" >> "$GITHUB_OUTPUT"
          echo "LOCAL_MANIFEST=https://raw.githubusercontent.com/SomeEmptyBox/android_build_utils/refs/heads/main/manifests/${{ inputs.android }}.xml" >> "$GITHUB_OUTPUT"

    outputs:
      PROJECTFOLDER: ${{ steps.proj-variables.outputs.PROJECTFOLDER }}
      PROJECTID: ${{ steps.proj-variables.outputs.PROJECTID }}
      REPO_INIT: ${{ steps.proj-variables.outputs.REPO_INIT }}
      BUILD_COMMAND: ${{ steps.proj-variables.outputs.BUILD_COMMAND }}
      LOCAL_MANIFEST: ${{ steps.proj-variables.outputs.LOCAL_MANIFEST }}

  build:
    timeout-minutes: 1440
    name: Build using Crave
    runs-on: self-hosted
    needs: [Start-Runner, prepare]
    concurrency:
      group: ${{ github.repository_owner }}
    steps:
      - name: Set Repo Project
        run: |
          echo "PROJECTFOLDER=${{ needs.prepare.outputs.PROJECTFOLDER }}" >> "$GITHUB_ENV"
          echo "PROJECTID=${{ needs.prepare.outputs.PROJECTID }}"  >> "$GITHUB_ENV"

      - name: Setup Project
        run: |
          echo "DCDEVSPACE status: $DCDEVSPACE"
          if [[ $DCDEVSPACE == *1* ]]; then
            echo "We are in devspace."
            echo $CRAVE_CONF > $HOME/crave.conf
            crave clone create --projectID $PROJECTID $PROJECTFOLDER || echo "Crave clone create failed!"
          else
            echo "We are not in devspace, exiting..."
            exit 1
          fi
        env:
          CRAVE_CONF: ${{ secrets.CRAVE_CONF }}

      - name: Setup crave.yaml
        run: |
          cat << EOF > $PROJECTFOLDER/.repo/manifests/crave.yaml
          LOS 22.1:
            ignoreClientHostname: true
            no-patch: true
            env:
              GH_TOKEN: "${{ secrets.GH_TOKEN }}"
          EOF

      - name: Set-up 'git' credential(s)
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

      - name: Start compilation through 'crave'
        run: |
          cd $PROJECTFOLDER

          echo "Build is queued! Please wait for your build to start."
          echo "Check foss.crave.io Dashboard to see builds"
          echo "Running build's log will show up here!"

          crave run --no-patch -- '# what you looking at ?
          # Run ID: ${{ github.run_id }}
          build_utils="https://raw.githubusercontent.com/SomeEmptyBox/android_build_utils/refs/heads/main"

          rm -rf .repo/local_manifests {device,vendor,kernel,hardware}/{motorola,private} '${{ inputs.removals }}'
          '${{ needs.prepare.outputs.REPO_INIT }}'
          curl -fLSs --create-dirs ${build_utils}/manifests/'${{ inputs.android }}'.xml -o .repo/local_manifests/default.xml
          git clone https://${GH_TOKEN}@github.com/SomeEmptyBox/android_vendor_private_keys vendor/private/keys
          /opt/crave/resync.sh

          curl -fLSs ${build_utils}/patches/telephony.patch | patch -p1 --forward
          curl -fLSs ${build_utils}/patches/kernel.patch | patch -p1 --forward

          export BUILD_USERNAME=peace
          export BUILD_HOSTNAME=crave
          export KBUILD_BUILD_USER=peace
          export KBUILD_BUILD_HOST=crave
          export TZ=Asia/Kolkata
          export TARGET_HAS_UDFPS=true
          export DISABLE_ARTIFACT_PATH_REQUIREMENTS=true

          source build/envsetup.sh
          breakfast ${{ inputs.device }} ${{ inputs.build }}
          mka installclean
          brunch ${{ inputs.device }} ${{ inputs.build }}
          '
        timeout-minutes: 1440

      - name: Pull ROM
        if: ${{ success() }}
        run: |
          cd $PROJECTFOLDER
          crave pull out/target/product/${{ inputs.device }}/{*.zip,eqe.json,boot.img,init_boot.img,vendor_boot.img,super_empty.img,recovery.img} -d ../artifacts/${{ inputs.android }}/${{ github.run_id }} || true
          rm ../artifacts/${{ inputs.android }}/${{ github.run_id }}/*ota* || true

      - name: Upload Artifacts
        uses: actions/upload-artifact@main
        with:
          path: /crave-devspaces/artifacts/${{ inputs.android }}/${{ github.run_id }}

      - name: Execute if the job is cancelled
        if: ${{ cancelled() }}
        run: |
          cd $PROJECTFOLDER
          crave stop --all

      - name: Display error.log
        if: ${{ failure() }}
        id: errorlog
        run: |
          cd $PROJECTFOLDER
          crave ssh -- sleep 1
          crave pull out/error.log
          echo "Displaying out/error.log"
          cat out/error.log

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: inputs.release == "true"

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Download all artifacts
        uses: actions/download-artifact@main
        with:
          path: artifacts

      - name: Set Release Tag and Notes
        run: |
          echo "release=$(date +"%Y-%m-%d")" >> $GITHUB_ENV
          cat << EOF > release_notes.md

          Notes:
           - Device: ${{ inputs.device }}
           - Build Type: ${{ inputs.build }}

          Sources:
           - [Device](https://github.com/SomeEmptyBox/android_device_motorola_eqe/tree/${{ inputs.android }})
           - [Vendor](https://gitlab.com/moto-sm7550/proprietary_vendor_motorola_eqe/tree/lineage-22.2)
           - [Kernel](https://github.com/moto-sm7550-devs/android_kernel_motorola_sm7550/tree/lineage-22.1)
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ inputs.android }}
          tag_name: ${{ env.release }}
          body_path: release_notes.md

      - name: Upload Release Assets
        run: |
          for file in $(find artifacts -type f -name "*.{zip,img}"); do
            echo "Uploading $file..."
            gh release upload "${{ env.release }}" "$file"
          done
        env:
          GH_TOKEN: ${{ github.token }}
